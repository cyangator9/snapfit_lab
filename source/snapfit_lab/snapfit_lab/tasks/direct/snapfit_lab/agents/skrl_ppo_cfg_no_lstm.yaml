seed: 42


# FALLBACK: PPO without LSTM (if LSTM instantiation fails)
# Use this if verify_lstm.py shows LSTM is not working
# Models are instantiated using skrl's model instantiator utility
# https://skrl.readthedocs.io/en/latest/api/utils/model_instantiators.html
models:
  separate: True
  policy:  # Actor (feedforward only)
    class: GaussianMixin
    clip_actions: False
    clip_log_std: True
    min_log_std: -20.0
    max_log_std: 2.0
    initial_log_std: 0.0
    network:
      - name: net
        input: STATES  # Uses observation_space (28)
        layers: [256, 256, 256, 256]  # Deeper network to compensate for no LSTM
        activations: elu
    output: ACTIONS
  value:  # Critic sees privileged information (asymmetric)
    class: DeterministicMixin
    clip_actions: False
    network:
      - name: net
        input: CRITIC_STATES  # Use privileged critic observations (asymmetric)
        layers: [256, 256, 256, 256]  # Deeper to compensate
        activations: elu
    output: ONE


# Rollout memory
# https://skrl.readthedocs.io/en/latest/api/memories/random.html
memory:
  class: RandomMemory
  memory_size: -1  # automatically determined (same as agent:rollouts)


# IMPROVED: Enhanced PPO agent configuration for contact-rich manipulation
# Based on NVIDIA IndustReal and research best practices
# https://skrl.readthedocs.io/en/latest/api/agents/ppo.html
agent:
  class: PPO
  rollouts: 128  # RESTORED: Optimal for contact-rich tasks
  learning_epochs: 4  # REDUCED from 5 for faster training (20% speedup)
  mini_batches: 8  # RESTORED: 262K samples / 8 = 32K per batch (optimal for PPO)
  discount_factor: 0.99
  lambda: 0.95
  learning_rate: 3.0e-04  # NVIDIA-recommended: standard for contact-rich tasks
  learning_rate_scheduler: KLAdaptiveLR
  learning_rate_scheduler_kwargs:
    kl_threshold: 0.008
  state_preprocessor: RunningStandardScaler
  state_preprocessor_kwargs: null
  value_preprocessor: RunningStandardScaler
  value_preprocessor_kwargs: null
  random_timesteps: 0
  learning_starts: 0
  grad_norm_clip: 1.0  # Gradient clipping for stability
  ratio_clip: 0.2
  value_clip: 0.2
  clip_predicted_values: True
  entropy_loss_scale: 0.01  # Exploration bonus
  value_loss_scale: 2.0
  kl_threshold: 0.0
  rewards_shaper_scale: 1.0
  time_limit_bootstrap: False  # Don't bootstrap on timeouts (we have early termination)
  # logging and checkpoint
  experiment:
    directory: "snapfit_lab"
    experiment_name: "ppo_snapfit_no_lstm"
    write_interval: auto
    checkpoint_interval: auto


# Sequential trainer
# https://skrl.readthedocs.io/en/latest/api/trainers/sequential.html
trainer:
  class: SequentialTrainer
  timesteps: 20000000  # INCREASED: 20M steps for full curriculum (4 stages)
  environment_info: log
  # Checkpointing
  checkpoint_interval: 2  # Save every 2 iterations (~524K steps = good balance)
  store_separately: True  # Store policy and value separately for analysis
